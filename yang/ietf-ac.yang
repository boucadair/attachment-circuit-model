module ietf-ac {
  yang-version 1.1;
  namespace "urn:ietf:params:xml:ns:yang:ietf-ac";
  prefix ac;

  import ietf-vpn-common {
    prefix vpn-common;
    reference
      "RFC 9181: A Common YANG Data Model for Layer 2 and Layer 3
                 VPNs";
  }
  import ietf-l3vpn-ntw {
    prefix l3nm;
    reference
      "RFC 9182: A YANG Network Data Model for Layer 3 VPNs";
  }
  import ietf-inet-types {
    prefix inet;
    reference
      "RFC 6991: Common YANG Data Types, Section 4";
  }
  import ietf-yang-types {
    prefix yang;
    reference
      "RFC 6991: Common YANG Data Types, Section 3";
  }

  organization
    "IETF OPSAWG (Operations and Management Area Working Group)";
  contact
    "WG Web:   <https://datatracker.ietf.org/wg/opsawg/>
     WG List:  <mailto:opsawg@ietf.org>

     Author:   Mohamed Boucadair
            <mailto:mohamed.boucadair@orange.com>
     Author:   Richard Roberts
           <mailto:rroberts@juniper.net>";
  description
    "This YANG module defines a generic YANG model for
     the configuration of attachment circuits.

     Copyright (c) 2022 IETF Trust and the persons identified as
     authors of the code.  All rights reserved.

     Redistribution and use in source and binary forms, with or
     without modification, is permitted pursuant to, and subject
     to the license terms contained in, the Revised BSD License
     set forth in Section 4.c of the IETF Trust's Legal Provisions
     Relating to IETF Documents
     (https://trustee.ietf.org/license-info).

     This version of this YANG module is part of RFC xxx; see the
     RFC itself for full legal notices.";

  revision 2022-11-30 {
    description
      "Initial revision.";
    reference
      "RFC xxxx: A YANG Data Model for Attachment Circuits";
  }

  grouping ac {
    description
      "Grouping for Attachment Circuits.";
    leaf id {
      type string;
      description
        "An identifier of the AC.";
    }
    container connection {
      description
        "Defines Layer 2 protocols and parameters that
         are required to enable AC connectivity.";
      container encapsulation {
        description
          "Container for Layer 2 encapsulation.";
        leaf type {
          type identityref {
            base vpn-common:encapsulation-type;
          }
          default "vpn-common:priority-tagged";
          description
            "Encapsulation type.  By default, the type
             of the tagged interface is
             'priority-tagged'.";
        }
        container dot1q {
          when "derived-from-or-self(../type, "
             + "'vpn-common:dot1q')" {
            description
              "Only applies when the type of the
               tagged interface is 'dot1q'.";
          }
          description
            "Tagged interface.";
          leaf tag-type {
            type identityref {
              base vpn-common:tag-type;
            }
            default "vpn-common:c-vlan";
            description
              "Tag type.  By default, the tag type is
               'c-vlan'.";
          }
          leaf cvlan-id {
            type uint16 {
              range "1..4094";
            }
            description
              "VLAN identifier.";
          }
        }
        container priority-tagged {
          when "derived-from-or-self(../type, "
             + "'vpn-common:priority-tagged')" {
            description
              "Only applies when the type of
               the tagged interface is
               'priority-tagged'.";
          }
          description
            "Priority tagged.";
          leaf tag-type {
            type identityref {
              base vpn-common:tag-type;
            }
            default "vpn-common:c-vlan";
            description
              "Tag type.  By default, the tag type is
               'c-vlan'.";
          }
        }
        container qinq {
          when "derived-from-or-self(../type, "
             + "'vpn-common:qinq')" {
            description
              "Only applies when the type of the
               tagged interface is 'qinq'.";
          }
          description
            "Includes QinQ parameters.";
          leaf tag-type {
            type identityref {
              base vpn-common:tag-type;
            }
            default "vpn-common:s-c-vlan";
            description
              "Tag type.";
          }
          leaf svlan-id {
            type uint16;
            mandatory true;
            description
              "Service VLAN (S-VLAN) identifier.";
          }
          leaf cvlan-id {
            type uint16;
            mandatory true;
            description
              "Customer VLAN (C-VLAN) identifier.";
          }
        }
      }
      choice l2-service {
        description
          "The Layer 2 connectivity service can be
           provided by indicating a pointer to an
           L2VPN or by specifying a Layer 2 tunnel
           service.";
        container l2-tunnel-service {
          description
            "Defines a Layer 2 tunnel termination.
             It is only applicable when a tunnel is
             required.  The supported values are
             'pseudowire', 'vpls', and 'vxlan'.  Other
             values may be defined, if needed.";
          leaf type {
            type identityref {
              base l3nm:l2-tunnel-type;
            }
            description
              "Selects the tunnel termination option
               for each AC Endpoint.";
          }
          container pseudowire {
            when "derived-from-or-self(../type, "
               + "'pseudowire')" {
              description
                "Only applies when the Layer 2 service
                 type is 'pseudowire'.";
            }
            description
              "Includes pseudowire termination
               parameters.";
            leaf vcid {
              type uint32;
              description
                "Indicates a pseudowire (PW) or
                 virtual circuit (VC) identifier.";
            }
            leaf far-end {
              type union {
                type uint32;
                type inet:ip-address;
              }
              description
                "Neighbor reference.";
              reference
                "RFC 8077: Pseudowire Setup and
                           Maintenance Using the Label
                           Distribution Protocol
                           (LDP), Section 6.1";
            }
          }
          container vpls {
            when "derived-from-or-self(../type, "
               + "'vpls')" {
              description
                "Only applies when the Layer 2 service
                 type is 'vpls'.";
            }
            description
              "VPLS termination parameters.";
            leaf vcid {
              type uint32;
              description
                "VC identifier.";
            }
            leaf-list far-end {
              type union {
                type uint32;
                type inet:ip-address;
              }
              description
                "Neighbor reference.";
            }
          }
          container vxlan {
            when "derived-from-or-self(../type, "
               + "'vxlan')" {
              description
                "Only applies when the Layer 2 service
                 type is 'vxlan'.";
            }
            description
              "VXLAN termination parameters.";
            leaf vni-id {
              type uint32;
              mandatory true;
              description
                "VXLAN Network Identifier (VNI).";
            }
            leaf peer-mode {
              type identityref {
                base vpn-common:vxlan-peer-mode;
              }
              default "vpn-common:static-mode";
              description
                "Specifies the VXLAN access mode.  By
                 default, the peer mode is set to
                 'static-mode'.";
            }
            leaf-list peer-ip-address {
              type inet:ip-address;
              description
                "List of a peer's IP addresses.";
            }
          }
        }
        case l2vpn {
          leaf l2vpn-id {
            type vpn-common:vpn-id;
            description
              "Indicates the L2VPN service associated
               with an Integrated Routing and Bridging
               (IRB) interface.";
          }
        }
      }
      leaf l2-termination-point {
        type string;
        description
          "Specifies a reference to a local Layer 2
           termination point, such as a Layer 2
           sub-interface.";
      }
      leaf local-bridge-reference {
        type string;
        description
          "Specifies a local bridge reference to
           accommodate, for example, implementations
           that require internal bridging.
           A reference may be a local bridge domain.";
      }
      leaf bearer-reference {
        if-feature "vpn-common:bearer-reference";
        type string;
        description
          "This is an internal reference for the
           service provider to identify the bearer
           associated with this VPN.";
      }
      container lag-interface {
        if-feature "vpn-common:lag-interface";
        description
          "Container for configuration of Link
           Aggregation Group (LAG) interface
           attributes.";
        leaf lag-interface-id {
          type string;
          description
            "LAG interface identifier.";
        }
        container member-link-list {
          description
            "Container for the member link list.";
          list member-link {
            key "name";
            description
              "Member link.";
            leaf name {
              type string;
              description
                "Member link name.";
            }
          }
        }
      }
    }
  }
}
